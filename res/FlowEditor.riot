<FlowEditor>
	<div class="downarrow" data-insertat="0" onclick={ onAddStepClick } ondragover={ onStepDropOver } ondrop={ onStepDrop }></div>
	<div each={ (step, index) in state.steps } key={ step.key }>
		<div class={ ["step", 'step-'+step.discriminator].join(' ') } draggable="true" ondragstart={ onStepDragStart } data-step={ index }>
			<template if={ step.discriminator === 'FlowConditional' }>
				<i class="ms-Icon ms-Icon--HighlightMappedShapes" data-step={ index } onclick={ toggleCollapse }></i>
				<span>{ __(step.loop ? 'Loop while' : 'If') + ' ' + __readableCondition(step.conditional) }</span>
				<div class="btngrp">
					<button onclick={ onEditFlowConditional } data-flow={ index }>{ __('Edit') }</button>
					<button onclick={ onDebugStep } data-flow={ index }><i class="ms-Icon ms-Icon--BugSolid"></i></button>
					<button onclick={ onDeleteStep } data-flow={ index }><i class="ms-Icon ms-Icon--RecycleBin"></i></button>
				</div>
			</template>
			<template if={ step.discriminator === 'FlowMath' }>
				<i class="ms-Icon ms-Icon--CalculatorEqualTo"></i>
				<span><span if={step.resultinto.length > 0}>{ step.resultinto } = </span>{ step.expression.replace(/\n/g,'‚Æê') }</span>
				<div class="btngrp">
					<button onclick={ onEditFlowMath } data-flow={ index }>{ __('Edit') }</button>
					<button onclick={ onDebugStep } data-flow={ index }><i class="ms-Icon ms-Icon--BugSolid"></i></button>
					<button onclick={ onDeleteStep } data-flow={ index }><i class="ms-Icon ms-Icon--RecycleBin"></i></button>
				</div>
			</template>
			<template if={ step.discriminator === 'FlowAction' }>
				<i class="ms-Icon ms-Icon--Processing"></i>
				<span><span if={step.resultinto.length > 0}>{ step.resultinto } = </span>{ __actionByChannel(step.channel) }</span>
				<div class="btngrp">
					<button onclick={ onEditFlowAction } data-flow={ index }>{ __('Edit') }</button>
					<button onclick={ onDebugStep } data-flow={ index }><i class="ms-Icon ms-Icon--BugSolid"></i></button>
					<button onclick={ onDeleteStep } data-flow={ index }><i class="ms-Icon ms-Icon--RecycleBin"></i></button>
				</div>
			</template>
			<template if={ step.discriminator === 'FlowVariable' }>
				<i class="ms-Icon ms-Icon--Variable"></i>
				<span>{ step.variable } ({ __(step.type) }) = { JSON.stringify(step.content) }</span>
				<div class="btngrp">
					<button onclick={ onEditFlowVariable } data-flow={ index }>{ __('Edit') }</button>
					<button onclick={ onDebugStep } data-flow={ index }><i class="ms-Icon ms-Icon--BugSolid"></i></button>
					<button onclick={ onDeleteStep } data-flow={ index }><i class="ms-Icon ms-Icon--RecycleBin"></i></button>
				</div>
			</template>
			<template if={ step.discriminator === 'FlowWait' }>
				<i class="ms-Icon ms-Icon--Clock"></i>
				<span>{ __('Waiting for {{seconds}} seconds', { seconds: (step.time/1000) }) }</span>
				<div class="btngrp">
					<button onclick={ onEditFlowWait } data-flow={ index }>{ __('Edit') }</button>
					<button onclick={ onDebugStep } data-flow={ index }><i class="ms-Icon ms-Icon--BugSolid"></i></button>
					<button onclick={ onDeleteStep } data-flow={ index }><i class="ms-Icon ms-Icon--RecycleBin"></i></button>
				</div>
			</template>
			<template if={ step.discriminator === 'FlowWebRequest' }>
				<i class="ms-Icon ms-Icon--Globe"></i>
				<span>{ step.method + ' ' + step.url }</span>
				<div class="btngrp">
					<button onclick={ onEditFlowWebRequest } data-flow={ index }>{ __('Edit') }</button>
					<button onclick={ onDebugStep } data-flow={ index }><i class="ms-Icon ms-Icon--BugSolid"></i></button>
					<button onclick={ onDeleteStep } data-flow={ index }><i class="ms-Icon ms-Icon--RecycleBin"></i></button>
				</div>
			</template>
			<template if={ step.discriminator === 'FlowNotes' }>
				<i class="ms-Icon ms-Icon--KnowledgeArticle"></i>
				<span style="white-space:pre;">{ step.notes }</span>
				<div class="btngrp">
					<button onclick={ onEditFlowNotes } data-flow={ index }>{ __('Edit') }</button>
					<button onclick={ onDeleteStep } data-flow={ index }><i class="ms-Icon ms-Icon--RecycleBin"></i></button>
				</div>
			</template>
		</div>
		<template if={ step.discriminator === 'FlowConditional' }>
			<div class="subflow" if={ !isCollapsed(step) }>
				<floweditor id={ 'chatbot_'+index+'_floweditor' } stepprefix={ state.stepprefix + '_' + index.toString() } ondebugclick={ props.ondebugclick } flow={ step.flow }></floweditor>
			</div>
			<template if={ !step.loop && !isCollapsed(step) }>
				<div class="step else"><span>{ __('Else') }</span></div>
				<div class="subflow">
					<floweditor id={ 'chatbot_'+index+'_alt_floweditor' } stepprefix={ state.stepprefix + '_' + index.toString() + '_alt' } ondebugclick={ props.ondebugclick } flow={ step.elseflow }></floweditor>
				</div>
			</template>
			<div class="step else" if={ !step.loop }><span>{ __('End if') }</span></div>
			<div class="step else" if={ step.loop }><span>{ __('End loop') }</span></div>
		</template>
		<div class="downarrow" data-insertat={ index+1 } onclick={ onAddStepClick } ondragover={ onStepDropOver } ondrop={ onStepDrop }></div>
	</div>

	<style>
		:host {
			display: block;
		}

		:host .step {
			width: calc(100% - 22px);
		}

		:host .downarrow:hover {
			cursor: pointer;
			background: none;
			text-align: center;
			font-size: 2em;
			line-height: 35px;
		}
		:host .downarrow:hover:before {
			content: "+";
		}

		:host .subflow {
			width: calc(95% - 3px);
			margin-left: 5%;
			border-left: 3px solid rgba(255, 255, 255, 0.3);
		}
		:host .subflow > floweditor > div > .step {
			border-left: 0px;
			width: calc(100% - 21px);
		}
		:host .step.else {
			width: calc(98% - 22px);
			margin-left: 2%;
			opacity: 0.8;
			padding: 5px 10px;
			background: rgba(255,255,0, 0.1);
		}
		:host .subflow > floweditor > div > .step.else {
			width: calc(98% - 25px);
			border-left: 1px solid rgba(255, 255, 255, 0.3);
		}

		:host .step-FlowConditional {
			background: rgba(255,255,0, 0.1);
		}
		:host .step-FlowMath {
			background: rgba(0,0,255, 0.1);
		}
		:host .step-FlowAction {
			background: rgba(0,255,0, 0.1);
		}
		:host .step-FlowVariable {
			background: rgba(255,0,0, 0.1);
		}
		:host .step-FlowWait {
			background: rgba(255,0,255, 0.1);
		}
		:host .step-FlowWebRequest {
			background: rgba(0,255,255, 0.1);
		}
		:host .step-FlowNotes {
			background: rgba(0,0,0, 0.1);
		}

		:host .step .ms-Icon--HighlightMappedShapes {
			cursor: pointer;
		}
	</style>
	<script>
		const { ipcRenderer } = require('electron');
		const riot = require('riot');

		const Context = require('../lib/Context/Context');
		const ConditionalGroup = require('../lib/ConditionalGroup').default;
		import FlowVariableEditor from './FlowVariableEditor.riot';
		const FlowVariableEditorMount = riot.component(FlowVariableEditor);
		import WebRequestInput from './WebRequestInput.riot';
		const WebRequestInputMount = riot.component(WebRequestInput);

		let scrollBefore = 0;

		export default {

			__actionByChannel(channel) {
				let actions = TTVST.Broadcast.getAction({ channel });
				if(actions.length > 0) {
					return this.__(actions[0].addon) + ': ' + this.__(actions[0].label);
				} else {
					return channel;
				}
			},

			__readableCondition(conditionjson) {
				let cond = new ConditionalGroup(JSON.parse(conditionjson));
				return cond.readable();
			},

			onBeforeMount(props, state) {
				this.__ = global.TTVST.i18n.__;
				this.state.steps = [];
				this.state.keystate = 0;
				this.state.editingIndex = -1;
				this.state.collapsedCondition = [];
				this.state.changesmade = false;

				if(typeof(props.stepprefix) === 'undefined') {
					this.state.stepprefix = '';
				} else {
					this.state.stepprefix = props.stepprefix;
				}

				if(typeof(props.flow) === 'object' && Array.isArray(props.flow)) {
					for(let i = 0; i < props.flow.length; i++) {
						this.state.keystate++;
						props.flow[i].k = this.state.keystate;
					}
					this.state.steps = props.flow;
				}
			},

			onBeforeUpdate() {
				scrollBefore = document.querySelector('#contentWrapper').scrollTop;
			},
			onUpdated() {
				document.querySelector('#contentWrapper').scrollTop = scrollBefore;
			},

			async onAddStepClick(e) {
				const self = this;

				let btn = e.currentTarget;
				let insertAt = parseInt(btn.dataset.insertat);
	
				let selectedStep = await new Promise((resolve, reject) => {
					let typlbl = document.createElement('label');
					let typinp = document.createElement('select');
					let options = [document.createElement('option'),document.createElement('option'),document.createElement('option'),document.createElement('option'),document.createElement('option'),document.createElement('option'),document.createElement('option')];
					options[0].value = 'FlowConditional';options[1].value = 'FlowMath';options[2].value = 'FlowAction';options[3].value = 'FlowVariable';options[4].value = 'FlowWait';options[5].value = 'FlowWebRequest';options[6].value = 'FlowNotes';
					options[0].appendChild(document.createTextNode(self.__('Condition / Loop')));
					options[1].appendChild(document.createTextNode(self.__('Math')));
					options[2].appendChild(document.createTextNode(self.__('Action')));
					options[3].appendChild(document.createTextNode(self.__('Variable')));
					options[4].appendChild(document.createTextNode(self.__('Wait')));
					options[5].appendChild(document.createTextNode(self.__('Make a web request')));
					options[6].appendChild(document.createTextNode(self.__('Notes')));
					for(let i = 0; i < options.length; i++)
						typinp.appendChild(options[i]);
					
					let typdesc = document.createElement('small');
					typdesc.innerText = self.__('Select a step to insert');
					typlbl.appendChild(typinp);
					typlbl.appendChild(typdesc);

					let response = false;
					let nfmodal = TTVST.ui.modal([typlbl], 'Add step', 'FabricNewFolder', () => {
						if(response) {
							resolve(nfmodal.$('select > option:checked').value);
						} else {
							resolve('');
						}
					}, [
						{ key: 'ok', title: 'OK', callback: () => { response = true; } },
						{ key: 'cancel', title: 'Cancel' }
					], false);
				});
				if(selectedStep.length > 0) {
					switch(selectedStep) {
						case 'FlowConditional':
							this.state.keystate++;
							this.state.steps.splice(insertAt, 0, { k: this.state.keystate, discriminator: 'FlowConditional', conditional: '{"discriminator":"ConditionGroup","conditions":[],"operator":"and"}', flow: [], elseflow: [], loop: false });
							break;
						case 'FlowMath':
							this.state.keystate++;
							this.state.steps.splice(insertAt, 0, { k: this.state.keystate, discriminator: 'FlowMath', expression: '', resultinto: '' });
							break;
						case 'FlowAction':
							this.state.keystate++;
							this.state.steps.splice(insertAt, 0, { k: this.state.keystate, discriminator: 'FlowAction', channel: '', parameters: [], resultinto: '' });
							break;
						case 'FlowVariable':
							this.state.keystate++;
							this.state.steps.splice(insertAt, 0, { k: this.state.keystate, discriminator: 'FlowVariable', variable: '', type: 'number', content: 0, processing: 'none', processingextra: '' });
							break;
						case 'FlowWait':
							this.state.keystate++;
							this.state.steps.splice(insertAt, 0, { k: this.state.keystate, discriminator: 'FlowWait', time: 5000 });
							break;
						case 'FlowWebRequest':
							this.state.keystate++;
							this.state.steps.splice(insertAt, 0, { k: this.state.keystate, discriminator: 'FlowWebRequest', url: '', method: 'GET', contentType: 'application/json', headers: '', body: '', whattoresult: 'body', resultinto: '' });
							break;
						case 'FlowNotes':
							this.state.keystate++;
							this.state.steps.splice(insertAt, 0, { k: this.state.keystate, discriminator: 'FlowNotes', notes: '' });
							break;
					}
					this.state.changesmade = true;
					this.update();
				}
			},

			async onDeleteStep(e) {
				let btn = e.currentTarget;
				let flowIndex = parseInt(btn.dataset.flow);
				this.state.steps.splice(flowIndex, 1);
				this.state.changesmade = true;
				this.update();
			},

			async onEditFlowMath(e) {
				let btn = e.currentTarget;
				let flowIndex = parseInt(btn.dataset.flow);
				let math = this.state.steps[flowIndex]
				
				if(math.discriminator != 'FlowMath') {
					return;
				}

				this.state.editingIndex = flowIndex;

				const self = this;
				let [resultinto, expression] = await new Promise((resolve, reject) => {
					let expressionlbl = document.createElement('label');
					let expressioninp = document.createElement('textarea');
					let expressiondesc = document.createElement('small');
					let resultintolbl = document.createElement('label');
					let resultintoinp = document.createElement('input');
					let resultintodesc = document.createElement('small');

					expressioninp.setAttribute('id', 'flowmathedit_expression');
					expressioninp.innerHTML = math.expression.replace(/</g,'&lt;').replace(/>/g,'&gt;');
					expressionlbl.innerText = self.__('Math.js expression');
					expressionlbl.appendChild(expressioninp);
					expressiondesc.innerText = self.__('Enter your Math.js expression here. Learn more about the syntax on mathjs.org. You can use TTVST variables to input data.');
					expressionlbl.appendChild(expressioninp);
					expressionlbl.appendChild(expressiondesc);

					resultintoinp.setAttribute('id', 'flowmathedit_resultinto');
					resultintoinp.setAttribute('type', 'text');
					resultintoinp.value = math.resultinto;
					resultintolbl.innerText = self.__('Result into variable');
					resultintolbl.appendChild(resultintoinp);
					resultintodesc.innerText = self.__('Enter a TTVST variable that you want the result put into');
					resultintolbl.appendChild(resultintoinp);
					resultintolbl.appendChild(resultintodesc);

					let response = false;
					let _resultinto = '';
					let nfmodal = TTVST.ui.modal([expressionlbl, resultintolbl], 'Edit Math', 'CalculatorEqualTo', () => {
						if(response) {
							resolve([_resultinto, nfmodal.$('#flowmathedit_expression').value]);
						} else {
							resolve([null, null]);
						}
					}, [
						{ key: 'ok', title: 'OK', callback: () => {
							 _resultinto = nfmodal.$('#flowmathedit_resultinto').value;
							if(_resultinto.length > 0) {
								let match = Context.validateVariable(_resultinto);
								if(match !== false) {
									response = true;
									_resultinto = match;
								} else {
									TTVST.ui.alert(self.__('Variable name is invalid. Must start with a letter and can only consist of numbers and letters.'));
									return false;
								}
							} else {
								response = true;
							}
						} },
						{ key: 'cancel', title: 'Cancel' }
					], false);
				});
				if(resultinto !== null) {
					this.state.steps[flowIndex].expression = expression;
					this.state.steps[flowIndex].resultinto = resultinto;
					this.state.changesmade = true;
					this.update();
				}
				this.state.editingIndex = -1;
			},

			async onEditFlowAction(e) {
				let btn = e.currentTarget;
				let flowIndex = parseInt(btn.dataset.flow);
				let action = this.state.steps[flowIndex]
				
				if(action.discriminator != 'FlowAction') {
					return;
				}

				this.state.editingIndex = flowIndex;

				const self = this;
				let [resultinto, channel, parameters] = await new Promise((resolve, reject) => {
					let selectactionlbl = document.createElement('label');
					let selectactiontxt = document.createTextNode(self.__('No action selected'));
					let selectactioninp = document.createElement('button');
					let resultintolbl = document.createElement('label');
					let resultintoinp = document.createElement('input');
					let resultintodesc = document.createElement('small');

					selectactioninp.setAttribute('type', 'button');
					selectactioninp.innerText = self.__('Select Action');
					let resultchannel = action.channel, resultparameters = action.parameters;
					let resultaction = TTVST.Broadcast.getAction({ channel: resultchannel });
					if(resultaction.length > 0) selectactiontxt.nodeValue = self.__(resultaction[0].label);
					selectactioninp.onclick = async () => {
						let botWrap = document.querySelector('chatbotwrap');
						let wrapSym = global.TTVST.getRiotComponent(botWrap);

						let dyninput = [];
						try {
							dyninput = await ipcRenderer.invoke('app.ttvst.chatbot.getContextForDynamicInput', wrapSym.getMoreContextVars());
						}catch(e) {
							console.error(e);
						}
						let r = await TTVST.ui.selectAction(resultchannel, resultparameters, dyninput);
						if(r !== null) {
							resultchannel = r.channel;
							resultparameters = r.parameter;
							
							resultaction = TTVST.Broadcast.getAction({ channel: resultchannel });
							if(resultaction.length > 0) selectactiontxt.nodeValue = self.__(resultaction[0].label);
						}
					};
					selectactionlbl.appendChild(selectactiontxt);
					selectactionlbl.appendChild(document.createElement('br'));
					selectactionlbl.appendChild(selectactioninp);

					resultintoinp.setAttribute('id', 'flowactionedit_resultinto');
					resultintoinp.setAttribute('type', 'text');
					resultintoinp.value = action.resultinto;
					resultintolbl.innerText = self.__('Result into variable');
					resultintolbl.appendChild(resultintoinp);
					resultintodesc.innerText = self.__('Enter a TTVST variable that you want the result put into');
					resultintolbl.appendChild(resultintoinp);
					resultintolbl.appendChild(resultintodesc);

					let response = false;
					let _resultinto = '';
					let nfmodal = TTVST.ui.modal([selectactionlbl, resultintolbl], 'Edit Action', 'Processing', () => {
						if(response) {
							resolve([_resultinto, resultchannel, resultparameters]);
						} else {
							resolve([null, null, null]);
						}
					}, [
						{ key: 'ok', title: 'OK', callback: () => {
							 _resultinto = nfmodal.$('#flowactionedit_resultinto').value;
							if(_resultinto.length > 0) {
								let match = Context.validateVariable(_resultinto);
								if(match !== false) {
									response = true;
									_resultinto = match;
								} else {
									TTVST.ui.alert(self.__('Variable name is invalid. Must start with a letter and can only consist of numbers and letters.'));
									return false;
								}
							} else {
								response = true;
							}
						} },
						{ key: 'cancel', title: 'Cancel' }
					], false);
				});
				if(resultinto !== null) {
					this.state.steps[flowIndex].channel = channel;
					this.state.steps[flowIndex].parameters = parameters;
					this.state.steps[flowIndex].resultinto = resultinto;
					this.state.changesmade = true;
					this.update();
				}
				this.state.editingIndex = -1;
			},

			async onEditFlowVariable(e) {
				let btn = e.currentTarget;
				let flowIndex = parseInt(btn.dataset.flow);
				let variable = this.state.steps[flowIndex]
				
				if(variable.discriminator != 'FlowVariable') {
					return;
				}

				this.state.editingIndex = flowIndex;

				const self = this;
				let result = await new Promise((resolve, reject) => {
					let fve = document.createElement('flowvariableeditor');
					let fveSym = FlowVariableEditorMount(fve, variable);

					let response = false;
					let _iflowvar = null;
					let nfmodal = TTVST.ui.modal([fve], 'Edit Variable', 'Variable', () => {
						if(response) {
							resolve(_iflowvar);
						} else {
							resolve(null);
						}
					}, [
						{ key: 'ok', title: 'OK', callback: () => {
							_iflowvar = fveSym.getIFlowVariable();
							let match = Context.validateVariable(_iflowvar.variable);
							if(match !== false) {
								_iflowvar.variable = match;
								response = true;
							} else {
								TTVST.ui.alert(self.__('Variable name is invalid. Must start with a letter and can only consist of numbers and letters.'));
								return false;
							}
						} },
						{ key: 'cancel', title: 'Cancel' }
					], false);
				});
				if(result !== null) {
					Object.assign(this.state.steps[flowIndex], result);
					this.state.changesmade = true;
					this.update();
				}
				this.state.editingIndex = -1;
			},

			async onEditFlowConditional(e) {
				let btn = e.currentTarget;
				let flowIndex = parseInt(btn.dataset.flow);
				let conditional = this.state.steps[flowIndex]
				
				if(conditional.discriminator != 'FlowConditional') {
					return;
				}

				this.state.editingIndex = flowIndex;

				const self = this;
				let result = await new Promise((resolve, reject) => {
					let fce = document.createElement('conditionalgroupinput');
					riot.mount(fce, { condgroup: new ConditionalGroup(JSON.parse(conditional.conditional)) });
					let fceSym = global.TTVST.getRiotComponent(fce);
					let looplbl = document.createElement('label');
					let loopinp = document.createElement('input');
					let loopdesc = document.createElement('small');
					looplbl.innerText = self.__('Loop');
					loopinp.setAttribute('type', 'checkbox');
					if(conditional.loop) {
						loopinp.setAttribute('checked', 'checked');
					}
					looplbl.appendChild(loopinp);
					loopdesc.innerText = self.__('Check this box to loop the subflow as long as the condition is met');
					looplbl.appendChild(loopdesc);

					let response = false;
					let nfmodal = TTVST.ui.modal([fce, looplbl], 'Edit Conditional', 'HighlightMappedShapes', () => {
						if(response) {
							resolve([fceSym.condgroup, loopinp.checked]);
						} else {
							resolve(null);
						}
					}, [
						{ key: 'ok', title: 'OK', callback: () => { response = true; } },
						{ key: 'cancel', title: 'Cancel' }
					], false);
				});
				if(result !== null) {
					this.state.steps[flowIndex].conditional = result[0].toString();
					this.state.steps[flowIndex].loop = result[1];
					this.state.changesmade = true;
					this.update();
				}
				this.state.editingIndex = -1;
			},
			
			async onEditFlowWait(e) {
				let btn = e.currentTarget;
				let flowIndex = parseInt(btn.dataset.flow);
				let wait = this.state.steps[flowIndex]
				
				if(wait.discriminator != 'FlowWait') {
					return;
				}

				this.state.editingIndex = flowIndex;

				const self = this;
				let waittime = await new Promise((resolve, reject) => {
					let waittimelbl = document.createElement('label');
					let waittimeinp = document.createElement('input');
					let waittimedesc = document.createElement('small');

					waittimeinp.setAttribute('id', 'flowwaitedit_time');
					waittimeinp.setAttribute('type', 'number');
					waittimeinp.value = wait.time/1000;
					waittimelbl.innerText = self.__('Time to wait in seconds');
					waittimelbl.appendChild(waittimeinp);
					waittimedesc.innerText = self.__('How long the execution is paused before continuing');
					waittimelbl.appendChild(waittimeinp);
					waittimelbl.appendChild(waittimedesc);

					let response = false;
					let nfmodal = TTVST.ui.modal([waittimelbl], 'Edit Wait', 'Clock', () => {
						if(response) {
							let waittime = parseFloat(nfmodal.$('#flowwaitedit_time').value);
							if(isNaN(waittime)) {
								waittime = 0;
							}
							resolve(Math.round(waittime * 1000));
						} else {
							resolve(null);
						}
					}, [
						{ key: 'ok', title: 'OK', callback: () => { response = true; } },
						{ key: 'cancel', title: 'Cancel' }
					], false);
				});
				if(waittime !== null) {
					this.state.steps[flowIndex].time = waittime;
					this.state.changesmade = true;
					this.update();
				}
				this.state.editingIndex = -1;
			},
			
			async onEditFlowWebRequest(e) {
				let btn = e.currentTarget;
				let flowIndex = parseInt(btn.dataset.flow);
				let webrequest = this.state.steps[flowIndex]
				
				if(webrequest.discriminator != 'FlowWebRequest') {
					return;
				}

				this.state.editingIndex = flowIndex;

				const self = this;
				let result = await new Promise(async (resolve, reject) => {
					let botWrap = document.querySelector('chatbotwrap');
					let wrapSym = global.TTVST.getRiotComponent(botWrap);
					let dyninput = [];
					try {
						dyninput = await ipcRenderer.invoke('app.ttvst.chatbot.getContextForDynamicInput', wrapSym.getMoreContextVars());
					} catch(e) {
						console.error(e);
					}

					let fve = document.createElement('webrequestinput');
					let fveSym = WebRequestInputMount(fve, { step: webrequest, dyninput });

					let response = false;
					let _flowobj = null;
					let nfmodal = TTVST.ui.modal([fve], 'Edit Web Request', 'Globe', () => {
						if(response) {
							resolve(_flowobj);
						} else {
							resolve(null);
						}
					}, [
						{ key: 'ok', title: 'OK', callback: () => {
							_flowobj = fveSym.getFlowObject();
							if(_flowobj.resultinto.length > 0) {
								let match = Context.validateVariable(_flowobj.resultinto);
								if(match !== false) {
									_flowobj.resultinto = match;
									response = true;
								} else {
									TTVST.ui.alert(self.__('Variable name is invalid. Must start with a letter and can only consist of numbers and letters.'));
									return false;
								}
							} else {
								response = true;
							}
						} },
						{ key: 'cancel', title: 'Cancel' }
					], false);
				});
				if(result !== null) {
					Object.assign(this.state.steps[flowIndex], result);
					this.state.changesmade = true;
					this.update();
				}
				this.state.editingIndex = -1;
			},

			async onEditFlowNotes(e) {
				let btn = e.currentTarget;
				let flowIndex = parseInt(btn.dataset.flow);
				let notesf = this.state.steps[flowIndex]
				
				if(notesf.discriminator != 'FlowNotes') {
					return;
				}

				this.state.editingIndex = flowIndex;

				const self = this;
				let notes = await new Promise((resolve, reject) => {
					let noteslbl = document.createElement('label');
					let notesinp = document.createElement('textarea');
					let notesdesc = document.createElement('small');

					notesinp.setAttribute('id', 'flownotesedit_notes');
					notesinp.value = notesf.notes;
					noteslbl.innerText = self.__('Notes');
					noteslbl.appendChild(notesinp);
					notesdesc.innerText = self.__('This step is just for documentation purposes and will be skipped in flow execution.');
					noteslbl.appendChild(notesinp);
					noteslbl.appendChild(notesdesc);

					let response = false;
					let nfmodal = TTVST.ui.modal([noteslbl], 'Edit Notes', 'KnowledgeArticle', () => {
						if(response) {
							let notes = nfmodal.$('#flownotesedit_notes').value;
							resolve(notes);
						} else {
							resolve(null);
						}
					}, [
						{ key: 'ok', title: 'OK', callback: () => { response = true; } },
						{ key: 'cancel', title: 'Cancel' }
					], false);
				});
				if(notes !== null) {
					this.state.steps[flowIndex].notes = notes;
					this.state.changesmade = true;
					this.update();
				}
				this.state.editingIndex = -1;
			},


			onStepDragStart(e) {
				let index = parseInt(e.currentTarget.dataset.step);
				let step = this.state.steps[index];
				e.dataTransfer.setData('application/json', JSON.stringify(step));
			},
			onStepDropOver(e) {
				e.preventDefault();
				e.dataTransfer.dropEffect = 'copy';
			},
			onStepDrop(e) {
				try {
					let step = JSON.parse(e.dataTransfer.getData('application/json'));
					let insertAt = parseInt(e.currentTarget.dataset.insertat);
					if(typeof(step.discriminator) === 'string' && !isNaN(insertAt)) {
						this.state.keystate++;
						step.k = this.state.keystate;
						this.state.steps.splice(insertAt, 0, step);
						this.state.changesmade = true;
						this.update();
					}
				} catch(e) {}
			},

			isCollapsed(step) {
				if(this.state.collapsedCondition.indexOf(step.k) >= 0) {
					return true;
				}
				return false;
			},

			toggleCollapse(e) {
				let index = parseInt(e.currentTarget.dataset.step);
				let step = this.state.steps[index];
				if(this.isCollapsed(step)) {
					let i = this.state.collapsedCondition.indexOf(step.k);
					this.state.collapsedCondition.splice(i, 1);
				} else {
					this.state.collapsedCondition.push(step.k);
				}
				this.update();
			},

			getContextVars() {
				let vars = [];
				let until = this.state.editingIndex;
				
				for(let i = 0; i < this.state.steps.length; i++) {
					if(until >= 0 && i >= until) break;
					let step = this.state.steps[i];
					if(step.discriminator === 'FlowVariable') {
						vars.push({ name: step.variable, type: step.type });
					} else if(step.discriminator === 'FlowConditional') {
						var flowcond = this.$('#chatbot_'+i+'_floweditor');
						var flowcondalt = this.$('#chatbot_'+i+'_alt_floweditor');

						let flowcondSym = global.TTVST.getRiotComponent(flowcond);
						let [flowcondVars, flowcondStop] = flowcondSym.getContextVars();

						let flowcondaltStop = false, flowcondaltVars = [];
						if(typeof(flowcondalt) !== 'undefined') {
							let flowcondaltSym = global.TTVST.getRiotComponent(flowcondalt);
							[flowcondaltVars, flowcondaltStop] = flowcondaltSym.getContextVars();
						}

						if(flowcondStop || (!flowcondStop && !flowcondaltStop)) {
							for(let j = 0; j < flowcondVars.length; j++) {
								let found = false;
								for(let k = 0; k < vars.length; k++) {
									if(vars[k].name === flowcondVars[j].name && vars[k].type === flowcondVars[j].type) {
										vars[k] = flowcondVars[j];
										found = true;
									}
									var x = vars.indexOf(flowcondVars[j]);
									if(x < 0) {
										vars.push(flowcondVars[j]);
									} else {
										vars[x] = flowcondVars[j];
									}
								}
								if(!found) vars.push(flowcondVars[j]);
							}
						}
						if(flowcondaltStop || (!flowcondStop && !flowcondaltStop)) {
							for(let j = 0; j < flowcondaltVars.length; j++) {
								let found = false;
								for(let k = 0; k < vars.length; k++) {
									if(vars[k].name === flowcondaltVars[j].name && vars[k].type === flowcondaltVars[j].type) {
										vars[k] = flowcondaltVars[j];
										found = true;
									}
									var x = vars.indexOf(flowcondaltVars[j]);
									if(x < 0) {
										vars.push(flowcondaltVars[j]);
									} else {
										vars[x] = flowcondaltVars[j];
									}
								}
								if(!found) vars.push(flowcondaltVars[j]);
							}
						}

						if(flowcondStop || flowcondaltStop) {
							return [vars, true];
						}
					} else if(step.discriminator === 'FlowAction') {
						let actions = TTVST.Broadcast.getAction({ channel: step.channel });
						if(step.resultinto.length > 0 && actions.length > 0 && typeof(actions[0].result) === 'object') {
							let t = actions[0].result.type;
							if(t === 'list') t = 'array';
							if(t === 'assoc') t = 'object';
							vars.push({ name: step.resultinto, type: t });
						}
					} else if(step.discriminator === 'FlowMath') {
						vars.push({ name: step.resultinto, type: 'number' });
						vars.push({ name: step.resultinto, type: 'string' });
						vars.push({ name: step.resultinto, type: 'boolean' });
					} else if(typeof(step.resultinto) === 'string' && step.resultinto.length > 0) {
						vars.push({ name: step.resultinto, type: 'string' });
					}
				}

				if(this.root.getAttribute('id') === 'chatbot_main_floweditor' && until < 0) {
					return [[], false];
				}
				return [vars, until >= 0];
			},

			onDebugStep(e) {
				let btn = e.currentTarget;
				let flowIndex = btn.dataset.flow;
				//let step = this.state.steps[flowIndex]

				this.props.ondebugclick(this.state.stepprefix + '_' + flowIndex, this.state.changesmade);
			}

		}
	</script>

</FlowEditor>
