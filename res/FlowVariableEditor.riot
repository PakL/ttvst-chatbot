<FlowVariableEditor>
	<label>{__('Variable name')}<input type="text" class="variablename" readonly={ processing === 'disabled' && variableName.length > 0 } value={ variableName }><small>{__('Enter variable name. Must start with a letter (A-Z, no umlauts). Case sensitive. If the variable already exists, it will be overwritten.')}</small></label>
	<label>{__('Variable type')}<select class="variabletype" disabled={ processing === 'disabled' && variableName.length > 0 } onchange={ onTypeChange }>
			<option value="number" selected={ variableType === 'number' }>{__('number')}</option>
			<option value="string" selected={ variableType === 'string' }>{__('string')}</option>
			<option value="boolean" selected={ variableType === 'boolean' }>{__('boolean')}</option>
			<option value="array" selected={ variableType === 'array' }>{__('list')}</option>
			<option value="object" selected={ variableType === 'object' }>{__('assoc')}</option>
		</select><small class={ processing !== 'disabled' ? 'visible' : 'hidden' }>{__('Select the type of content of the variable. Depending on the variable type you select you will have different processing options available.')}</small></label>
	<div class={ processing !== 'disabled' ? 'visible' : 'hidden' }>
		<label>{__('Processing')}<select class="processing" onchange={ onProcessingChange }>
				<option value="none" selected={ processing === 'none' }>{__('None')}</option>
				<option value="split" selected={ processing === 'split' } if={ ['array'].indexOf(variableType) >= 0 }>{__('Split')}</option>
				<option value="join" selected={ processing === 'join' } if={ ['string'].indexOf(variableType) >= 0 }>{__('Join')}</option>
				<option value="enjson" selected={ processing === 'enjson' } if={ ['string'].indexOf(variableType) >= 0 }>{__('Encode JSON')}</option>
				<option value="dejson" selected={ processing === 'dejson' } if={ ['string', 'array', 'object'].indexOf(variableType) >= 0 }>{__('Decode JSON')}</option>
				<option value="enbase64" selected={ processing === 'enbase64' } if={ ['string'].indexOf(variableType) >= 0 }>{__('Encode Base64')}</option>
				<option value="debase64" selected={ processing === 'debase64' } if={ ['string'].indexOf(variableType) >= 0 }>{__('Decode Base64')}</option>
				<option value="urlencode" selected={ processing === 'urlencode' } if={ ['string'].indexOf(variableType) >= 0 }>{__('Encode for URI')}</option>
				<option value="urldecode" selected={ processing === 'urldecode' } if={ ['string', 'object'].indexOf(variableType) >= 0 }>{__('Decode for URI')}</option>
				<option value="append" selected={ processing === 'append' } if={ ['string', 'array', 'object'].indexOf(variableType) >= 0 }>{__('Append')}</option>
				<option value="prepend" selected={ processing === 'prepend' } if={ ['string', 'array'].indexOf(variableType) >= 0 }>{__('Prepend')}</option>
				<option value="shift" selected={ processing === 'shift' } if={ ['number', 'string','boolean'].indexOf(variableType) >= 0 }>{__('List shift')}</option>
				<option value="pop" selected={ processing === 'pop' } if={ ['number', 'string','boolean'].indexOf(variableType) >= 0 }>{__('List pop')}</option>
				<option value="searchremove" selected={ processing === 'searchremove' } if={ ['array', 'object'].indexOf(variableType) >= 0 }>{__('Search and remove')}</option>
				<option value="searchreplace" selected={ processing === 'searchreplace' } if={ ['string'].indexOf(variableType) >= 0 }>{__('Search and replace')}</option>
				<option value="substring" selected={ processing === 'substring' } if={ ['string'].indexOf(variableType) >= 0 }>{__('Cut out')}</option>
			</select>
			<small class="accent-light-font">{__('Process input below - select an option to see a description')}:&nbsp;
				<template if={ processing == 'none' }>{__('No processing.')}</template>
				<template if={ processing == 'split' }>{__('Split a string into a list by the splitter below.')}</template>
				<template if={ processing == 'join' }>{__('Join a list into string by the glue below.')}</template>
				<template if={ processing == 'enjson' }>{__('Encode an associative array or list into a JSON string. You can JSON escape strings too. Strings will be enclosed in double quotes (").')}</template>
				<template if={ processing == 'dejson' }>{__('Decode a JSON string into a list or associative array. You can decode JSON escaped string too. Strings must be enclosed in double quotes (").')}</template>
				<template if={ processing == 'enbase64' }>{__('Encode a string by base 64.')}</template>
				<template if={ processing == 'debase64' }>{__('Decode a string from a base 64 encoding.')}</template>
				<template if={ processing == 'urlencode' }>{__('Encode URI elements or associative arrays.')}</template>
				<template if={ processing == 'urldecode' }>{__('Decode URI elements or associative arrays.')}</template>
				<template if={ processing == 'append' }>{__('Append string/list to the end of a string/list. Associative arrays will be merged.')}</template>
				<template if={ processing == 'prepend' }>{__('Prepend string/list to the beginning of a string/list.')}</template>
				<template if={ processing == 'shift' }>{__('Puts the first element of a list into the variable and removes it from the list.')}</template>
				<template if={ processing == 'pop' }>{__('Puts the last element of a list into the variable and removes it from the list.')}</template>
				<template if={ processing == 'searchremove' }>{__('Searches a list for the content and removes it or searches an associative arrays for a key and removes that entry.')}</template>
				<template if={ processing == 'searchreplace' }>{__('Searches part of a text and replaces it.')}</template>
				<template if={ processing == 'substring' }>{__('Cut part of a text out and put it into the variable.')}</template>
			</small>
		</label>

		<label if={ processing == 'split' }>{__('Splitter')}<input type="text" class="processingextra" value={ processingextra }><small class="accent-light-font">{__('Enter symbol(s) that the string will be splitted by.')}</small></label>
		<label if={ processing == 'join' }>{__('Glue')}<input type="text" class="processingextra" value={ processingextra }><small class="accent-light-font">{__('Enter symbol(s) that the list items will be joined together by.')}</small></label>

		<input if={ ['searchreplace', 'substring'].indexOf(processing) >= 0 } type="hidden" class="processingextra extrajson" value={ processingextra }>
		<label if={ processing == 'searchreplace' }>{__('Needle')}<input type="text" class="extraval" data-extra="needle" onchange={ processExtrajson }><small class="accent-light-font">{__('Enter phrase to search in content.')}</small></label>
		<label if={ processing == 'searchreplace' }>{__('Regular expression')}<input type="checkbox" class="extraval" data-extra="regexp" onchange={ processExtrajson }><small class="accent-light-font">{__('Is needle a regular expression?')}</small></label>
		<label if={ processing == 'searchreplace' }>{__('Replace all')}<input type="checkbox" class="extraval" data-extra="global" onchange={ processExtrajson }><small class="accent-light-font">{__('Replace all occurrences instead of just the first?')}</small></label>
		<label if={ processing == 'searchreplace' }>{__('Ignore case')}<input type="checkbox" class="extraval" data-extra="ignorecase" onchange={ processExtrajson }><small class="accent-light-font">{__('Case insensitive search?')}</small></label>
		<label if={ processing == 'searchreplace' }>{__('Replace with')}<input type="text" class="extraval" data-extra="replace" onchange={ processExtrajson }><small class="accent-light-font">{__('Enter phrase to replace needle by.')}</small></label>
		
		<label if={ processing == 'substring' }>{__('Start Index')}<input type="text" class="extraval" data-extra="index" onchange={ processExtrajson }><small class="accent-light-font">{__('Index of the start of the cutout, starting at 0. When negative, the index starts counting from the end of the text.')}</small></label>
		<label if={ processing == 'substring' }>{__('Length')}<input type="text" class="extraval" data-extra="length" onchange={ processExtrajson }><small class="accent-light-font">{__('Length of the cutout in number of characters. Any number below 1 will mean until the end of the text.')}</small></label>
	</div>

	<label class={ contentinput === 'boolean' ? 'win10-switch inputblock' : '' }>{__('Content')}
		<template if={ contentinput === 'simple' }>
			<input type="string" class="variablecontent" value={ content }>
		</template>
		<div if={ contentinput === 'list' }>
			<input type="text" class="variablecontent">
			<button class="variablecontentadd" onclick={ onAddList }>+</button>
			<button class="variablecontentremove" onclick={ onRemoveList }>-</button>
		</div>
		<div if={ contentinput === 'assoc' } class="assoc">
			<input type="text" class="variablecontent key"><span class="variablecontent spacer">: </span><input type="text" class="variablecontent value">
			<button class="variablecontentadd" onclick={ onAddAssoc }>+</button>
			<button class="variablecontentremove" onclick={ onRemoveAssoc }>-</button>
		</div>
		<template if={ contentinput === 'boolean' }>
			<input type="checkbox" class="variablecontent" style="display:block;" checked={ content }>
			<span class={langclass}></span>
		</template>
	</label>

	<style>
		:host {
			display: block;
		}
		:host div.assoc > .key {
			display: inline-block;
			width: 30%;
		}
		:host div.assoc > .spacer {
			display: inline-block;
			width: 1%;
		}
		:host div.assoc > .value {
			display: inline-block;
			width: 69%
		}
		:host .hidden {
			display: none;
		}
		:host .visible > label {
			display: block;
			margin: 10px;
		}
		:host .visible > label > select, :host .visible > label > input  {
			margin-top: 5px;
			display: block;
			box-sizing: border-box;
			width: 100%;
		}
		:host .visible > label > small {
			display: block;
			margin-top: 5px;
			font-size: 12px;
		}
	</style>
	<script>
		export default {
			variableName: '',
			variableType: 'number',
			contentinput: 'simple',
			content: 0,
			processing: 'none',
			processingextra: '',

			firstupdate: true,


			onBeforeMount(props, state) {
				this.__ = global.TTVST.i18n.__;
				this.langclass = 'lang-' + global.TTVST.i18n._lang;

				let defaults = {
					variable: '',
					type: 'number',
					content: 0,
					processing: 'none',
					processingextra: ''
				};
				Object.assign(defaults, props);

				this.variableName = defaults.variable;
				this.variableType = defaults.type;
				this.processing = defaults.processing;
				this.onProcessingChange();
				this.content = defaults.content;
				this.processingextra = defaults.processingextra;
			},

			onMounted(props, state) {
				this.onUpdated(props, state);
			},
			
			onUpdated(props, state) {
				if(this.firstupdate) {
					this.firstupdate = false;

					if(this.contentinput === 'list') {
						for(let i = 0; i < this.content.length; i++) {
							if(i == 0) {
								this.$('.variablecontent').value = this.content[i];
							} else {
								this.onAddList().value = this.content[i];
							}
						}
					} else if(this.contentinput === 'assoc') {
						let keys = Object.keys(this.content);
						for(let i = 0; i < keys.length; i++) {
							let k = keys[i];
							let v = this.content[k];
							if(i == 0) {
								this.$('.variablecontent.key').value = k;
								this.$('.variablecontent.value').value = v;
							} else {
								let [inpk, inpv] = this.onAddAssoc();
								inpk.value = k;
								inpv.value = v;
							}
						}
					}
				}

				window.requestAnimationFrame((function(){
					this.unprocessExtrajson();
				}).bind(this));
			},

			onTypeChange() {
				this.variableType = this.$('.variabletype').value;
				if(this.processing !== 'none' && this.processing !== 'disabled') {
					this.$('.processing').value = 'none';
				}
				this.onProcessingChange();
			},

			onProcessingChange() {
				if(!this.firstupdate && this.processing !== 'disabled') {
					this.processing = this.$('.processing').value;
					this.processingextra = '';
				}

				if(this.processing === 'none' || this.processing === 'disabled') {
					if(this.variableType === 'number') {
						this.content = 0;
						this.contentinput = 'simple';
					} else if(this.variableType === 'string') {
						this.content = '';
						this.contentinput = 'simple';
					} else if(this.variableType === 'boolean') {
						this.content = false;
						this.contentinput = 'boolean';
					} else if(this.variableType === 'array') {
						this.content = '';
						this.contentinput = 'list';
					} else if(this.variableType === 'object') {
						this.content = '';
						this.contentinput = 'assoc';
					}
				} else if(['cast','split','join','enjson','dejson','urlencode','urldecode','append','prepend','shift','pop','searchremove','searchreplace','substring'].indexOf(this.processing) >= 0) {
					this.content = '';
					this.contentinput = 'simple';
				}

				if(!this.firstupdate) this.update();
			},
			

			onAddList(e) {
				let btn = null;
				if(typeof(e) == 'object') {
					btn = e.currentTarget;
				} else {
					btn = this.$('button.variablecontentadd')
				}
				let parent = btn.parentNode;

				let newInput = document.createElement('input');
				newInput.setAttribute('type', 'text');
				newInput.classList.add('variablecontent');
				parent.insertBefore(newInput, btn);
				return newInput;
			},
			onAddAssoc(e) {
				let btn = null;
				if(typeof(e) == 'object') {
					btn = e.currentTarget;
				} else {
					btn = this.$('button.variablecontentadd')
				}
				let parent = btn.parentNode;

				let newInputKey = document.createElement('input');
				let newSpacer = document.createElement('span');
				let newInputValue = document.createElement('input');
				newInputKey.setAttribute('type', 'text');
				newSpacer.innerText = ':';
				newInputValue.setAttribute('type', 'text');
				newInputKey.classList.add('key');
				newInputKey.classList.add('variablecontent');
				newSpacer.classList.add('spacer');
				newSpacer.classList.add('variablecontent');
				newInputValue.classList.add('value');
				newInputValue.classList.add('variablecontent');
				parent.insertBefore(newInputKey, btn);
				parent.insertBefore(newSpacer, btn);
				parent.insertBefore(newInputValue, btn);
				return [newInputKey, newInputValue];
			},

			onRemoveList(e) {
				let btn = e.currentTarget;
				let parent = btn.parentNode;

				let allInputs = parent.querySelectorAll('input');
				if(allInputs.length > 0) {
					parent.removeChild(allInputs[allInputs.length-1]);
				}
			},
			onRemoveAssoc(e) {
				let btn = e.currentTarget;
				let parent = btn.parentNode;

				let allInputs = parent.querySelectorAll('input');
				let allSpacers = parent.querySelectorAll('span');
				if(allInputs.length > 0) {
					parent.removeChild(allInputs[allInputs.length-2]);
					parent.removeChild(allInputs[allInputs.length-1]);
					parent.removeChild(allSpacers[allSpacers.length-1]);
				}
			},

			getIFlowVariable() {
				this.variableName = this.$('.variablename').value;
				if(this.contentinput === 'simple') {
					this.content = this.$('.variablecontent').value;
					if(this.variableType === 'number' && this.content.match(/^-?([0-9]+)(\.([0-9]+))?$/)) {
						this.content = parseFloat(this.content);
					}
				} else if(this.contentinput === 'list') {
					this.content = [];
					let inputs = this.$$('.variablecontent');
					for(let i = 0; i < inputs.length; i++) {
						this.content.push(inputs[i].value);
					}
				} else if(this.contentinput === 'assoc') {
					this.content = {};
					let keyinputs = this.$$('.variablecontent.key');
					let valinputs = this.$$('.variablecontent.value');
					if(keyinputs.length == valinputs.length) {
						for(let i = 0; i < keyinputs.length; i++) {
							if(keyinputs[i].value.length > 0) {
								this.content[keyinputs[i].value] = valinputs[i].value;
							}
						}
					}
				} else if(this.contentinput === 'boolean') {
					this.content = this.$('.variablecontent').checked;
				}

				let proext = this.$('.processingextra');
				if(typeof(proext) !== 'undefined') {
					this.processingextra = this.$('.processingextra').value;
				}

				return {
					discriminator: 'FlowVariable',
					variable: this.variableName,
					type: this.variableType,
					content: this.content,
					processing: this.processing,
					processingextra: this.processingextra
				}
			},

			unprocessExtrajson() {
				let extrajson = this.$('.extrajson');
				if(typeof(extrajson) !== 'undefined') {
					let extra = {};
					try {
						extra = JSON.parse(extrajson.value);
					} catch(e) {}
					let extraInputs = this.$$('.extraval');
					for(let e of extraInputs) {
						if(typeof(extra[e.dataset.extra]) === 'undefined') continue;
						if(e.getAttribute('type') === 'checkbox') {
							e.checked = (extra[e.dataset.extra] ? true : false);
						} else {
							e.value = extra[e.dataset.extra];
						}
					}
				}
			},
			processExtrajson() {
				let extrajson = this.$('.extrajson');
				if(typeof(extrajson) !== 'undefined') {
					let extra = {};
					let extraInputs = this.$$('.extraval');
					for(let e of extraInputs) {
						if(e.getAttribute('type') === 'checkbox') {
							extra[e.dataset.extra] = e.checked;
						} else {
							extra[e.dataset.extra] = e.value;
						}
					}
					extrajson.value = JSON.stringify(extra);
				}
			}
		}
	</script>
</FlowVariableEditor>