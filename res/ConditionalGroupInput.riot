<ConditionalGroupInput>
	<select onchange={ onOperatorChange }>
		<option value="and" selected={ condgroup.operator === 'and' }>{ __('AND: All conditions need to be met') }</option>
		<option value="or" selected={ condgroup.operator === 'or' }>{ __('OR: At least one condition must be met') }</option>
		<option value="xor" selected={ condgroup.operator === 'xor' }>{ __('XOR: ONLY one condition must be met') }</option>
	</select>
	<div class="conditions">
		<div each={ (condition, index) in this.condgroup.conditions } key={ condition.key } >
			<span class="delete" onclick={ onRemoveConditionClick } data-index={ index }><i class="ms-Icon ms-Icon--Cancel"></i></span>
			<ConditionalGroupInput if={ condition.discriminator === 'ConditionGroup' } condgroup={ condition }></ConditionalGroupInput>
			<ConditionalInput if={ condition.discriminator === 'Condition' } cond={ condition }></ConditionalInput>
		</div>
	</div>
	<div class="addbtns"><button onclick={ onAddConditionClick }>{ __('Add a condition') }</button>{ __(' or ') }<button onclick={ onAddConditionGroupClick }>{ __('Add a group') }</button></div>

	<style>
		:host {
			display: block;
		}
		:host > select {
			display: inline-block !important;
			width: auto !important;
		}
		:host > .conditions {
			border-left: 1px dashed rgba(255,255,255, 0.5);
			margin-left: 10px;
			position: relative;
		}
		:host > .conditions > div > conditionalinput, :host > .conditions > div > conditionalgroupinput, :host > .addbtns {
			margin-bottom: 5px;
		}
		:host > .conditions > div > conditionalgroupinput {
			background: rgba(255, 255, 255, 0.02);
		}
		:host > .conditions > div > conditionalinput::before, :host > .conditions > div > conditionalgroupinput::before {
			content: ' ';
			display: inline-block;
			height: 1px;
			width: 20px;
			border-top: 1px dashed rgba(255,255,255, 0.5);
			vertical-align: middle;
			margin-right: 5px;
		}
		:host > .conditions > div > span {
			display: block;
			position: absolute;
			color: #ff0000;
			cursor: pointer;
			margin: 7px 2px;
		}
		:host > .conditions > div > span > i {
			visibility: hidden;
		}
		:host > .conditions > div > span:hover > i {
			visibility: visible;
		}
		:host > .conditions > div > conditionalgroupinput > .conditions {
			margin-left: 35px;
		}
		:host > .conditions > div > conditionalgroupinput > .addbtns {
			margin-left: 25px;
		}
	</style>
	<script>
		const riot = require('riot');
		const Conditional = require('../lib/Conditional').default;
		const ConditionalGroup = require('../lib/ConditionalGroup').default;
		import ConditionalInput from './ConditionalInput.riot';
		riot.register('conditionalinput', ConditionalInput);

		export default {
			condgroup: null,

			onBeforeMount(props, state) {
				this.__ = global.TTVST.i18n.__;

				if(typeof(props.condgroup) === 'object' && props.condgroup !== null) {
					this.condgroup = props.condgroup;
				} else {
					this.condgroup = new ConditionalGroup({ discriminator: 'ConditionGroup', conditions: [], operator: 'and' });
				}
				this.state.keystate = 0;
				for(let i = 0; i < this.condgroup.conditions.length; i++) {
					this.condgroup.conditions[i].key = this.nextKey();
				}
			},

			onOperatorChange(e) {
				this.condgroup.operator = e.currentTarget.value;
			},

			nextKey() {
				this.state.keystate++;
				return this.state.keystate;
			},

			onAddConditionClick() {
				let c = new Conditional({ discriminator: 'Condition', left: '', right: '', compare: 'eq' });
				c.key = this.nextKey();
				this.condgroup.add(c);
				this.update();
			},

			onAddConditionGroupClick() {
				let cg = new ConditionalGroup({ discriminator: 'ConditionGroup', conditions: [], operator: 'and' });
				cg.key = this.nextKey();
				this.condgroup.add(cg);
				this.update();
			},

			async onRemoveConditionClick(e) {
				let target = e.currentTarget;
				let index = parseInt(target.dataset.index);
				if(await TTVST.ui.confirm('Do you really want to remove this condition?', true, 'Remove Condition', 'RecycleBin')) {
					this.condgroup.conditions.splice(index, 1);
					this.update();
				}
			}
		}
	</script>
</ConditionalGroupInput>