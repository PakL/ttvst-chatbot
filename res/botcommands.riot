<botcommands>
	<p>
		{ lang_desc }
	</p>
	<table class="datatable">
		<thead>
			<tr><th>{ lang_command }</th><th>{ lang_response }</th><th>{ lang_action }</th><th>{ lang_active }</th><th>{ lang_sort }</th></tr>
		</thead>
		<tbody>
			<tr each={ c in commands }>
				<td>{ c.cmd }</td>
				<td>{ c.response }</td>
				<td><button onclick={ editCommand }>{ lang_edit }</button> <button onclick={ deleteCommand }>{ lang_delete }</button></td>
				<td><label class="win10-switch"><input type="checkbox" checked={ c.active } onchange={ deactivateCommand }></label></td>
				<td><button onclick={ moveUp }>⬆</button> <button onclick={ moveDown }>⬇</button></td>
			</tr>
		</tbody>
		<tfoot>
			<tr>
				<td colspan="5"><button onclick={ createCommand }>{ lang_new }</button></td>
			</tr>
		</tfoot>
	</table>

	<style>
		botcommands {
			display: block;
			padding: 10px;
		}
		botcommands table {
			width: 100%;
		}
		botcommands table td {
			vertical-align: top;
		}
	</style>
	<script>
		const {BrowserWindow} = remote
		export default {

			onBeforeMount() {
				this.i18n = this.props.i18n
				this.addon = this.props.addon
				this.addonDirname = this.props.addonDirname
				this.commands = []
				this.lang_desc = this.i18n.__('Please note that these commands only work in your own channel. Commands will be executed in the order they appear.')
				this.lang_command = this.i18n.__('Command')
				this.lang_response = this.i18n.__('Response')
				this.lang_action = this.i18n.__('Action')
				this.lang_edit = this.i18n.__('Edit')
				this.lang_delete = this.i18n.__('Delete')
				this.lang_new = this.i18n.__('New Command')
				this.lang_active = this.i18n.__('Activated')
				this.lang_sort = this.i18n.__('Sort')
				this.makeAccessible()
			},

			onMounted() {
				this.loadCommands()
			},
			
			loadCommands() {
				this.commands = []
				this.update()
				this.commands = Tool.settings.getJSON('bot_commands', [])
				this.resetIds()
				this.addon.setCommands(this.commands)
				this.update()
			},

			resetIds() {
				for(let i = 0; i < this.commands.length; i++)
					this.commands[i].id = (i+1)
			},

			saveCommands() {
				this.resetIds()
				Tool.settings.setJSON('bot_commands', this.commands)
				this.addon.setCommands(this.commands)
			},

			openEditWindow(index) {
				let top = BrowserWindow.getFocusedWindow()
				if(top === null && BrowserWindow.getAllWindows().length > 0) {
					top = BrowserWindow.getAllWindows()[0]
				}
				if(top !== null) {
					let editWindow = new BrowserWindow({
						title: this.i18n.__('Edit Bot Command'),
						parent: top,
						modal: true,
						autoHideMenuBar: true,
						minimizable: false,
						maximizable: false,
						fullscreenable: false,
						icon: '/res/icon.ico',
						width: 450,
						height: 650,
						minWidth: 300,
						minHeight: 400,
						webPreferences: {
							nodeIntegration: true
						}
					})
					const self = this
					editWindow.on('close', () => {
						editWindow = null
						self.loadCommands()
					})
					editWindow.loadURL('file://' + path.join(this.addonDirname, 'views/editcommand.html') + '#command=' + index)
				}
			},

			editCommand(e) {
				this.openEditWindow(this.commands.indexOf(e.item))
			},

			deactivateCommand(e) {
				if(e.item.cmd.length <= 0 && e.target.checked) {
					e.target.checked = false
					alert(this.i18n.__('Command must not be empty in order to be able to be activated'))
				}
				e.item.active = e.target.checked
				this.saveCommands()
			},
			moveUp(e) {
				let index = this.commands.indexOf(e.item)
				if(index == 0) return
				let commandFirst = this.commands[index-1]
				let commandSecond = this.commands[index]
				this.commands.splice(index-1, 2, commandSecond, commandFirst)
				this.saveCommands()
			},
			moveDown(e) {
				let index = this.commands.indexOf(e.item)
				if(index >= this.commands.length-1) return
				let commandFirst = this.commands[index]
				let commandSecond = this.commands[index+1]
				this.commands.splice(index, 2, commandSecond, commandFirst)
				this.saveCommands()
			},

			deleteCommand(e) {
				let remove = this.commands.indexOf(e.item)
				if(confirm(this.i18n.__('Are you sure to delete the command {{command}}?', {'command':  e.item.cmd}))) {
					this.commands.splice(remove, 1)
					this.saveCommands()
				}
			},

			createCommand() {
				this.commands.push({
					id: this.commands.length+1,
					cmd: '',
					response: '',
					active: true,
					permission: 'broadcaster',
					timeout: 5
				})
				this.saveCommands()
				this.openEditWindow(this.commands.length -1)
			}
		}
	</script>
</botcommands>