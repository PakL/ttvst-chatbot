<ChatbotList>
	<div class="actionbar">
		<button title={ __('Move up one folder') } onclick={ onMoveUp }><i class="ms-Icon ms-Icon--Up"></i></button>
		<button disabled class="btnCopy" onclick={ onCopyClick }><i class="ms-Icon ms-Icon--Copy"></i>{ __('Copy') }</button>
		<button disabled class="btnCut" onclick={ onCutClick }><i class="ms-Icon ms-Icon--Cut"></i>{ __('Cut') }</button>
		<button disabled class="btnPaste" onclick={ onPasteClick }><i class="ms-Icon ms-Icon--Paste"></i>{ __('Paste') }</button>
		<span if={ clipboard.length > 0 }>
			<span class="vr accent-contrast-border"></span>
			{ __('{{itemcount}} items in clipboard', { itemcount: clipboard.length }) }
		</span>
		<span class="vr accent-contrast-border"></span>
		<button disabled class="btnDelete" onclick={ onDeleteClick }><i class="ms-Icon ms-Icon--RecycleBin"></i>{ __('Delete') }</button>
		<button disabled class="btnEdit" onclick={ onEditClick }><i class="ms-Icon ms-Icon--Edit"></i>{ __('Edit') }</button>
		<span class="vr accent-contrast-border"></span>
		<button onclick={ onNewFolderClick }><i class="ms-Icon ms-Icon--FabricNewFolder"></i>{ __('New Folder') }</button>
		<button onclick={ onNewFlowClick }><i class="ms-Icon ms-Icon--FlowChart"></i>{ __('New Flow') }</button>
		<span class="vr accent-contrast-border"></span>
		<button onclick={ onOpenVariableEditor }><i class="ms-Icon ms-Icon--Variable"></i>{ __('Global variables') }</button>
	</div>
	<div class="actionbar breadcrumps">
		<button data-folder="-1" onclick={ onBreadcrumpClick }>~</button>
		<template each={ folder in currentPath }>
			<span>/</span>
			<button data-folder={ folder.key } onclick={ onBreadcrumpClick }>{ folder.name }</button>
		</template>
	</div>
	<table>
		<thead>
			<tr>
				<th width="33"></th>
				<th class="accent-contrast-border accent-contrast-font clickable" onclick={ onHeadSortClick } data-sortcolumn="name" data-sortdir={ sortColumn == 'name' ? (sortDirection == 'asc' ? 'desc' : 'asc') : 'asc' } style="width:33%;">{ __('Name') }<span if={ sortColumn == 'name' } class="sortbullet">{sortDirectionIcon}</span></th>
				<th class="accent-contrast-border accent-contrast-font">{ __('Trigger') }</th>
				<th class="accent-contrast-border accent-contrast-font clickable" onclick={ onHeadSortClick } data-sortcolumn="active" data-sortdir={ sortColumn == 'active' ? (sortDirection == 'asc' ? 'desc' : 'asc') : 'asc' }>{ __('Active') }<span if={ sortColumn == 'active' } class="sortbullet">{sortDirectionIcon}</span></th>
				<th class="accent-contrast-border accent-contrast-font clickable" onclick={ onHeadSortClick } data-sortcolumn="modified" data-sortdir={ sortColumn == 'modified' ? (sortDirection == 'asc' ? 'desc' : 'asc') : 'desc' }>{ __('Last modified') }<span if={ sortColumn == 'modified' } class="sortbullet">{sortDirectionIcon}</span></th>
			</tr>
		</thead>
		<tbody>
			<tr each={ folder in folders } class="folder accent-contrast-border" key={ folder.key }>
				<td><input type="checkbox" class="selectcheckbox" onchange={ onSelectChange } data-type="folder" data-folder={ folder.key } /></td>
				<td class="accent-contrast-background-hover clickable" data-folder={ folder.key } onclick={ onFolderClick }><i class="ms-Icon ms-Icon--FabricFolder"></i><span>{ folder.name }</span></td>
				<td></td>
				<td><label class="win10-switch"><input type="checkbox" onchange={ onActiveChange } checked={ folder.active } data-type="folder" data-folder={ folder.key } /><span class={langclass}></span></label></td>
				<td>{ dateformat(folder.lastModified) }</td>
			</tr>
			<tr each={ flow in flows } class="flow accent-contrast-border" key={ flow.key }>
				<td><input type="checkbox" class="selectcheckbox" onchange={ onSelectChange } data-type="flow" data-flow={ flow.key } /></td>
				<td class="accent-contrast-background-hover clickable" data-flow={ flow.key } onclick={ onFlowClick }><i class="ms-Icon ms-Icon--FlowChart"></i><span>{ flow.name }</span></td>
				<td>{ displayTrigger(flow.trigger) }</td>
				<td><label class="win10-switch"><input type="checkbox" onchange={ onActiveChange } checked={ flow.active } data-type="flow" data-flow={ flow.key } /><span class={langclass}></span></label></td>
				<td>{ dateformat(flow.lastModified) }</td>
			</tr>
			<tr if={ folders.length <= 0 && flows.length <= 0 } class="accent-contrast-border">
				<td colspan="5" class="accent-contrast-font" style="text-align:center;">{ __('This folder is empty.') }</td>
			</tr>
		</tbody>
	</table>

	<style>
		:host > .breadcrumps {
			padding-left: 5px;
		}
		:host > .breadcrumps > button {
			background: transparent;
			border-color: transparent;
			cursor: pointer;
			margin-left: 5px;
		}

		:host > table {
			width: 100%;
			border-collapse: collapse;
		}
		:host > table > tbody > tr {
			border-top: 1px solid;
		}
		:host > table > thead > tr > th {
			border-left: 1px solid;
			text-align: left;
		}
		:host > table > thead > tr > th:nth-child(1) {
			border-left: 0;
		}
		:host > table tr > td, :host > table tr > th {
			padding: 5px 10px;
		}
		:host > table tr > td >  i.ms-Icon {
			display: inline-block;
			font-size: 1.8em;
			width: 30px;
			height: 30px;
			vertical-align: middle;
			margin-right: 10px;
		}
		:host td.clickable, :host th.clickable {
			cursor: pointer;
		}
		:host td .win10-switch > input[type=checkbox]::before {
			font-size: 1.8em;
		}
	</style>
	<script>
		const { ipcRenderer } = require('electron');
		const riot = require('riot');
		const Folder = require('../lib/Folder').default;
		const Flow = require('../lib/Flow').default;
		const ConditionalGroup = require('../lib/ConditionalGroup').default;

		import ConditionalGroupInput from './ConditionalGroupInput.riot';
		const conditionalGroupInputCmpnt = riot.component(ConditionalGroupInput);

		export default {
			currentFolder: null,
			folders: [],
			flows: [],
			currentPath: [],

			sortColumn: 'name',
			sortDirection: 'asc',
			sortDirectionIcon: '▲',

			clipboard: [],
			moveClipboard: false,
			
			onBeforeMount(props, state) {
				this.__ = global.TTVST.i18n.__;
				this.langclass = 'lang-' + global.TTVST.i18n._lang;
			},

			onMounted() {
				this.openFolder(typeof(this.props.openingfolder) === 'number' ? this.props.openingfolder : -1, 2);
			},

			onBeforeUpdate() {
				this.sortlist();
				if(this.sortDirection == 'asc') {
					this.sortDirectionIcon = '▲';
				} else {
					this.sortDirectionIcon = '▼';
				}
			},

			onUpdated() {
				this.onSelectChange();
			},

			dateformat(date) {
				return TTVST.DateFormat(date, 'isoDateTime');
			},

			sortlist() {
				const self = this;
				let sortfunc = (a, b) => {
					return (a.name.localeCompare(b.name) * (self.sortDirection == 'asc' ? 1 : -1));
				};
				if(this.sortColumn == 'active') {
					sortfunc = (a, b) => {
						if(a.active == b.active) {
							return (a.name.localeCompare(b.name) * (self.sortDirection == 'asc' ? 1 : -1));
						} else if(a.active && !b.active) {
							return (self.sortDirection == 'asc' ? -1 : 1);
						} else {
							return (self.sortDirection == 'asc' ? 1 : -1);
						}
					};
				} else if(this.sortColumn == 'modified') {
					sortfunc = (a, b) => {
						return (a.lastModified.getTime() - b.lastModified.getTime()) * (self.sortDirection == 'asc' ? 1 : -1);
					};
				} else {
					this.sortColumn = 'name';
				}
				this.folders.sort(sortfunc);
				this.flows.sort(sortfunc);
			},

			onHeadSortClick(e) {
				let target = e.currentTarget;
				this.sortColumn = target.dataset.sortcolumn;
				this.sortDirection = target.dataset.sortdir;
				this.update();
			},

			async openFolder(folderKey, flag) {
				if(typeof(flag) !== 'number') {
					flag = 0;
				}

				if(flag === 1) {
					this.currentPath.pop();
				}

				if(folderKey < 0) {
					this.currentFolder = null;
					this.currentPath = [];
				} else {
					this.currentFolder = await Folder.get(folderKey);
					await this.currentFolder.correctPath();
					if(flag === 0) {
						this.currentPath.push(this.currentFolder);
					}
				}

				let supkey = -1;
				if(this.currentFolder !== null) {
					supkey = this.currentFolder.key;
				}
				this.folders = await Folder.getByIndex('superior', supkey);
				this.flows = await Flow.getByIndex('superior', supkey)


				if(flag === 2 && this.currentFolder !== null) {
					this.currentPath = await this.currentFolder.getAbsolutePath();
				}
				this.update();
			},

			onFolderClick(e) {
				let target = e.currentTarget
				this.openFolder(parseInt(target.dataset.folder));
			},

			onMoveUp() {
				if(this.currentFolder != null) {
					this.openFolder(this.currentFolder.superior, 1)
				}
			},

			onBreadcrumpClick(e) {
				let target = e.currentTarget
				this.openFolder(parseInt(target.dataset.folder), 2);
			},

			async editFolder(folder) {
				const self = this;
				let [folderName, conditionalGroup] = await new Promise((resolve, reject) => {
					let namelbl = document.createElement('label');
					let nameinp = document.createElement('input');
					nameinp.setAttribute('type', 'text');
					nameinp.setAttribute('id', 'chatbot-newfolder-name');
					nameinp.setAttribute('placeholder', self.__('Folder name'));
					nameinp.value = folder.name;
					let namedesc = document.createElement('small');
					namedesc.innerText = self.__('Enter your new folder name here');
					namelbl.appendChild(nameinp);
					namelbl.appendChild(namedesc);

					let condlbl = document.createElement('div');
					condlbl.style.margin = '10px';
					let cogrin = conditionalGroupInputCmpnt(document.createElement('ConditionalGroupInput'), { condgroup: folder.conditionals });
					condlbl.appendChild(cogrin.root);

					let response = false;
					let nfmodal = TTVST.ui.modal([namelbl, condlbl], self.__('New folder'), 'FabricNewFolder', () => {
						if(response) {
							resolve([nfmodal.$('#chatbot-newfolder-name').value, cogrin.condgroup]);
						} else {
							resolve(['', null]);
						}
					}, [
						{ key: 'ok', title: 'OK', callback: () => { response = true; } },
						{ key: 'cancel', title: 'Cancel' }
					], true)
				});

				if(folderName.length > 0) {
					folder.name = folderName;
					folder.conditionals = conditionalGroup;
					await folder.save();

					ipcRenderer.send('app.ttvst.chatbot.registerFlows');
				}
			},

			async onNewFolderClick() {
				const self = this;
				try {
					let f = Folder.factory({
						name: '',
						path: (this.currentFolder !== null ? this.currentFolder.path + this.currentFolder.key.toString() : '') + '/',
						superior: (this.currentFolder !== null ? this.currentFolder.key : -1),
						active: true,
						conditionals: 'null',
						lastModified: new Date()
					});
					await this.editFolder(f);
					this.openFolder((this.currentFolder !== null ? this.currentFolder.key : -1), 2);
				} catch(e) {
					console.error(e);
				}
			},

			getSelectedElements() {
				let checkboxes = this.$$('input[type="checkbox"].selectcheckbox');
				let checkedElements = [];
				for(let i = 0; i < checkboxes.length; i++) {
					if(checkboxes[i].checked) {
						checkedElements.push(checkboxes[i]);
					}
				}
				return checkedElements;
			},

			onSelectChange() {
				let checkedElements = this.getSelectedElements();

				if(checkedElements.length > 0) {
					if(checkedElements.length >= 1) {
						this.$('button.btnCopy').removeAttribute('disabled');
						this.$('button.btnCut').removeAttribute('disabled');
						this.$('button.btnDelete').removeAttribute('disabled');
					}
					if(checkedElements.length > 1) {
						this.$('button.btnEdit').setAttribute('disabled', 'disabled');
					} else {
						this.$('button.btnEdit').removeAttribute('disabled');
					}
				} else {
					this.$('button.btnCopy').setAttribute('disabled', 'disabled');
					this.$('button.btnCut').setAttribute('disabled', 'disabled');
					this.$('button.btnEdit').setAttribute('disabled', 'disabled');
					this.$('button.btnDelete').setAttribute('disabled', 'disabled');
				}
			},

			async onEditClick() {
				let checkedElements = this.getSelectedElements();

				if(checkedElements.length == 1) {
					let editType = checkedElements[0].dataset.type;
					if(editType === 'folder') {
						let folderId = parseInt(checkedElements[0].dataset.folder);
						try {
							let f = await Folder.get(folderId);
							await this.editFolder(f);
							this.openFolder((this.currentFolder !== null ? this.currentFolder.key : -1), 2);
						} catch(e) {
							console.error(e);
						}
					} else if(editType === 'flow') {
						let flowId = parseInt(checkedElements[0].dataset.flow);
						try {
							let flow = await Flow.get(flowId);
							this.props.onflowedit(flow);
						} catch(e) {
							console.error(e);
						}
					}
				}
			},

			onNewFlowClick() {
				try {
					let f = Flow.factory({
						name: '',
						path: (this.currentFolder !== null ? this.currentFolder.path + this.currentFolder.key.toString() : '') + '/',
						superior: (this.currentFolder !== null ? this.currentFolder.key : -1),
						active: false,
						lastModified: new Date(),
						trigger: null,
						conditionals: 'null',
						flow: '[]'
					});
					this.props.onflowedit(f);
				} catch(e) {
					console.error(e);
				}
			},

			displayTrigger(channel) {
				if(channel.length == 0) {
					return this.__('No trigger selected');
				}

				let triggers = TTVST.Broadcast.getTrigger({ channel });
				if(triggers.length == 1) {
					return this.__(triggers[0].label);
				}
				return channel;
			},

			async onFlowClick(e) {
				let target = e.currentTarget
				try {
					let flow = await Flow.get(parseInt(target.dataset.flow));
					this.props.onflowedit(flow);
				} catch(e) {
					console.error(e);
				}
			},


			async onActiveChange(e) {
				let target = e.currentTarget;
				let active = target.checked;
				let type = target.dataset.type;
				if(type === 'folder') {
					let folderId = parseInt(target.dataset.folder);
					let folder = await Folder.get(folderId);
					folder.active = active;
				} else if(type === 'flow') {
					let flowId = parseInt(target.dataset.flow);
					let flow = await Flow.get(flowId);
					flow.active = active;
				}

				setTimeout(() => {
					ipcRenderer.send('app.ttvst.chatbot.registerFlows');
				}, 500);
			},

			onCopyClick() {
				this.clipboard = this.getSelectedElements();
				this.moveClipboard = false;
				if(this.clipboard.length > 0) {
					this.$('button.btnPaste').removeAttribute('disabled');
				}
				this.update();
			},
			onCutClick() {
				this.clipboard = this.getSelectedElements();
				this.moveClipboard = true;
				if(this.clipboard.length > 0) {
					this.$('button.btnPaste').removeAttribute('disabled');
				}
				this.update();
			},
			async onPasteClick() {
				if(this.clipboard.length > 0) {
					if(this.moveClipboard) {
						for(let i = 0; i < this.clipboard.length; i++) {
							let item = this.clipboard[i];
							if(item.dataset.type === 'folder') {
								let folderId = parseInt(item.dataset.folder);
								let folder = await Folder.get(folderId);
								if(await this.checkForMovingProblems(folder, this.currentFolder === null ? -1 : this.currentFolder.key)) {
									TTVST.ui.alert('Cannot move folder into itself.');
									return;
								}
							}
						}
					}
					for(let i = 0; i < this.clipboard.length; i++) {
						let item = this.clipboard[i];
						if(item.dataset.type === 'folder') {
							let folderId = parseInt(item.dataset.folder);
							let folder = await Folder.get(folderId);
							await this.copyFolder(folder, this.currentFolder === null ? -1 : this.currentFolder.key);
						} else if(item.dataset.type === 'flow') {
							let flowId = parseInt(item.dataset.flow);
							let flow = await Flow.get(flowId);
							await this.copyFlow(flow, this.currentFolder === null ? -1 : this.currentFolder.key);
						}
					}
					this.clipboard = [];
					this.moveClipboard = false;
					this.openFolder(this.currentFolder === null ? -1 : this.currentFolder.key, 2);
					ipcRenderer.send('app.ttvst.chatbot.registerFlows');
				}
			},
			async checkForMovingProblems(folder, newsuperior) {
				let supfolders = await folder.getAbsolutePath();
				for(let i = 0; i < supfolders.length; i++) {
					if(supfolders[i].key == newsuperior) {
						return true;
					}
				}
				return false;
			},
			findABetterName(floworfolder, haystack) {
				let newName = floworfolder.name;
				let appendNumber = 0;
				let m = newName.match(/ \(([0-9]+)\)$/)
				if(m !== null) {
					appendNumber = parseInt(m[1]);
					newName = newName.substring(0, newName.length - m[0].length);
				}
				for(let i = 0; i < haystack.length; i++) {
					let f = haystack[i];
					let m = f.name.match(/ \(([0-9]+)\)$/)
					if(f.name == newName || (f.name.startsWith(newName) && m !== null)) {
						let newNumber = (m === null ? 0 : parseInt(m[1]));
						if(appendNumber <= newNumber) {
							appendNumber = newNumber+1;
						}
					}
				}
				if(appendNumber > 0) {
					newName += ' (' + appendNumber.toString() + ')';
				}
				return newName;
			},
			async copyFolder(folder, newsuperior) {
				if(this.moveClipboard) {
					folder.data.superior = newsuperior;
					await folder.correctPath();
				} else {
					let existingFolders = await Folder.getByIndex('superior', newsuperior);
					let newName = this.findABetterName(folder, existingFolders);

					let newdata = Object.assign({}, folder.data);
					delete newdata.key;
					newdata.name = newName;
					
					let newFolder = Folder.factory(newdata);
					newFolder.data.superior = newsuperior;
					await newFolder.save();
					await newFolder.correctPath();

					let subfolder = await Folder.getByIndex('superior', folder.key);
					for(let i = 0; i < subfolder.length; i++) {
						await this.copyFolder(subfolder[i], newFolder.key);
					}
					let subflow = await Flow.getByIndex('superior', folder.key);
					for(let i = 0; i < subflow.length; i++) {
						await this.copyFlow(subflow[i], newFolder.key);
					}
				}
			},
			async copyFlow(flow, newsuperior) {
				if(this.moveClipboard) {
					flow.data.superior = newsuperior;
					await flow.correctPath();
				} else {
					let existingFlows = await Flow.getByIndex('superior', newsuperior);
					let newName = this.findABetterName(flow, existingFlows);

					let newdata = Object.assign({}, flow.data);
					delete newdata.key;
					newdata.name = newName;
					
					let newFlow = Flow.factory(newdata);
					newFlow.data.superior = newsuperior;
					await newFlow.save();
					await newFlow.correctPath();
				}
			},

			async deleteFolder(folder) {
				let subfolder = await Folder.getByIndex('superior', folder.key);
				for(let i = 0; i < subfolder.length; i++) {
					await this.deleteFolder(subfolder[i]);
				}
				let subflow = await Flow.getByIndex('superior', folder.key);
				for(let i = 0; i < subflow.length; i++) {
					try {
						await subflow[i].delete();
					} catch(e) { console.error(e) }
				}

				try {
					await folder.delete();
				} catch(e) { console.error(e) }
			},

			async onDeleteClick() {
				let selected = this.getSelectedElements();
				if(selected.length > 0) {
					let confirmText = TTVST.i18n.__('Are you sure you want to delete these {{count}} items? Contents of folders will be deleted as well.', { count: selected.length });
					if(selected.length == 1) {
						if(selected[0].dataset.type === 'folder') {
							confirmText = 'Are you sure you want to delete this folder? The contents of the folder will be deleted as well.';
						} else {
							confirmText = 'Are you sure you want to delete this flow?';
						}
					}
					if(await TTVST.ui.confirm(confirmText, true)) {
						for(let i = 0; i < selected.length; i++) {
							let item = selected[i];
							if(item.dataset.type === 'folder') {
								let folderId = parseInt(item.dataset.folder);
								let folder = await Folder.get(folderId);
								await this.deleteFolder(folder);
							} else if(item.dataset.type === 'flow') {
								let flowId = parseInt(item.dataset.flow);
								let flow = await Flow.get(flowId);
								try {
									await flow.delete();
								} catch(e) { console.error(e) }
							}
						}
						this.openFolder(this.currentFolder === null ? -1 : this.currentFolder.key, 2);
						ipcRenderer.send('app.ttvst.chatbot.registerFlows');
					}
				}
			},

			onOpenVariableEditor() {
				if(typeof(this.props.ongvaredit) === 'function') {
					this.props.ongvaredit(this.currentFolder === null ? -1 : this.currentFolder.key);
				}
			}
		}
	</script>
</ChatbotList>